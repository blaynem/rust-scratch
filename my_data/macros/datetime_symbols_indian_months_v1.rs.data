// @generated
# [doc = " Implement `DataProvider<IndianMonthSymbolsV1Marker>` on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_datetime_symbols_indian_months_v1 { ($ provider : ty) => { # [clippy :: msrv = "1.67"] const _ : () = < $ provider > :: MUST_USE_MAKE_PROVIDER_MACRO ; # [clippy :: msrv = "1.67"] impl icu_provider :: DataProvider < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker > , icu_provider :: DataError > { static JA_X_4 : < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: Linear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x0C\0\0\0\0\0\x01\0\x02\0\x03\0\x04\0\x05\0\x06\0\x07\0\x08\0\t\0\x0B\0\r\x00123456789101112") } ,) ; static UND_X_3 : < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: Linear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x0C\0\0\0\0\0\x07\0\x0F\0\x17\0\x1D\0$\0*\x000\x007\0A\0F\0K\0ChaitraVaisakhaJyaisthaAsadhaSravanaBhadraAsvinaKartikaAgrahayanaPausaMaghaPhalguna") } ,) ; static JA_X_3 : < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: Linear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x0C\0\0\0\0\0\x0C\0\x1B\0*\x006\0B\0N\0Z\0i\0{\0\x84\0\x8D\0\xE3\x82\xAB\xE3\x82\xA4\xE3\x83\x88\xE3\x83\xA9\xE3\x83\xB4\xE3\x82\xA1\xE3\x82\xA4\xE3\x82\xB5\xE3\x82\xAB\xE3\x82\xB8\xE3\x83\xA3\xE3\x82\xA4\xE3\x82\xB9\xE3\x82\xBF\xE3\x82\xA2\xE3\x83\xBC\xE3\x82\xB5\xE3\x83\x80\xE3\x82\xB9\xE3\x83\xA9\xE3\x83\x90\xE3\x83\x8A\xE3\x83\x90\xE3\x83\xBC\xE3\x83\x89\xE3\x83\xA9\xE3\x82\xA2\xE3\x82\xB9\xE3\x83\x93\xE3\x83\x8A\xE3\x82\xAB\xE3\x83\xAB\xE3\x83\x87\xE3\x82\xA3\xE3\x82\xAB\xE3\x82\xA2\xE3\x83\xB4\xE3\x83\xA9\xE3\x83\x8F\xE3\x83\xA4\xE3\x83\x8A\xE3\x83\x91\xE3\x82\xA6\xE3\x82\xB5\xE3\x83\x9E\xE3\x83\xBC\xE3\x82\xAC\xE3\x83\x91\xE3\x83\xAB\xE3\x82\xB0\xE3\x83\x8A") } ,) ; static VALUES : [& < icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable ; 12usize] = [& JA_X_3 , & JA_X_3 , & JA_X_4 , & JA_X_4 , & JA_X_3 , & JA_X_3 , & UND_X_3 , & UND_X_3 , & JA_X_4 , & JA_X_4 , & UND_X_3 , & UND_X_3] ; static KEYS : [& str ; 12usize] = ["ja-x-3" , "ja-x-3s" , "ja-x-4" , "ja-x-4s" , "ja-x-5" , "ja-x-5s" , "und-x-3" , "und-x-3s" , "und-x-4" , "und-x-4s" , "und-x-5" , "und-x-5s"] ; if let Ok (payload) = KEYS . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . map (| i | * unsafe { VALUES . get_unchecked (i) }) { Ok (icu_provider :: DataResponse { payload : Some (icu_provider :: DataPayload :: from_static_ref (payload)) , metadata : Default :: default () , }) } else { Err (icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu::datetime :: provider :: neo :: IndianMonthSymbolsV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } }