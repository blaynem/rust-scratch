// @generated
# [doc = " Implement `DataProvider<PluralRangesV1Marker>` on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_plurals_ranges_v1 { ($ provider : ty) => { # [clippy :: msrv = "1.67"] const _ : () = < $ provider > :: MUST_USE_MAKE_PROVIDER_MACRO ; # [clippy :: msrv = "1.67"] impl icu_provider :: DataProvider < icu::plurals :: provider :: PluralRangesV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu::plurals :: provider :: PluralRangesV1Marker > , icu_provider :: DataError > { static JA : < icu::plurals :: provider :: PluralRangesV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::plurals :: provider :: PluralRangesV1 { ranges : unsafe { # [allow (unused_unsafe)] zerovec :: ZeroMap :: from_parts_unchecked (zerovec :: ZeroVec :: new () , zerovec :: ZeroVec :: new ()) } , } ; static VALUES : [& < icu::plurals :: provider :: PluralRangesV1Marker as icu_provider :: DataMarker > :: Yokeable ; 1usize] = [& JA] ; static KEYS : [& str ; 1usize] = ["ja"] ; if let Ok (payload) = KEYS . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . map (| i | * unsafe { VALUES . get_unchecked (i) }) { Ok (icu_provider :: DataResponse { payload : Some (icu_provider :: DataPayload :: from_static_ref (payload)) , metadata : Default :: default () , }) } else { Err (icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu::plurals :: provider :: PluralRangesV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } }