// @generated
# [doc = " Implement `DataProvider<TimeLengthsV1Marker>` on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_datetime_timelengths_v1 { ($ provider : ty) => { # [clippy :: msrv = "1.67"] const _ : () = < $ provider > :: MUST_USE_MAKE_PROVIDER_MACRO ; # [clippy :: msrv = "1.67"] impl icu_provider :: DataProvider < icu::datetime :: provider :: calendar :: TimeLengthsV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu::datetime :: provider :: calendar :: TimeLengthsV1Marker > , icu_provider :: DataError > { static JA : < icu::datetime :: provider :: calendar :: TimeLengthsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: calendar :: TimeLengthsV1 { time_h11_h12 : icu::datetime :: provider :: calendar :: patterns :: LengthPatternsV1 { full : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80`\x01\x80p\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA3\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , long : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80`\x01\x80p\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA3\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , medium : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80`\x01\x80p\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , short : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80`\x01\x80p\x01\0\0:\x80\x80\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Minutes , } , } , time_h23_h24 : icu::datetime :: provider :: calendar :: patterns :: LengthPatternsV1 { full : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x01\0fB\x80\x80\x02\0R\x06\x80\x90\x02\0y\xD2\0\0 \x80\xA0\x04") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , long : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA0\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , medium : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , short : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x01\0\0:\x80\x80\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Minutes , } , } , preferred_hour_cycle : icu::datetime :: pattern :: CoarseHourCycle :: H23H24 , } ; static UND : < icu::datetime :: provider :: calendar :: TimeLengthsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: calendar :: TimeLengthsV1 { time_h11_h12 : icu::datetime :: provider :: calendar :: patterns :: LengthPatternsV1 { full : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01\0\0 \x80\xA3\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , long : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01\0\0 \x80\xA3\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , medium : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , short : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80q\x01\0\0:\x80\x80\x02\0\0 \x80`\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Minutes , } , } , time_h23_h24 : icu::datetime :: provider :: calendar :: patterns :: LengthPatternsV1 { full : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA0\x04") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , long : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA0\x01") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , medium : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Seconds , } , short : icu::datetime :: pattern :: runtime :: Pattern { items : unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"\x80r\x02\0\0:\x80\x80\x02") } , time_granularity : icu::datetime :: pattern :: TimeGranularity :: Minutes , } , } , preferred_hour_cycle : icu::datetime :: pattern :: CoarseHourCycle :: H23H24 , } ; static VALUES : [& < icu::datetime :: provider :: calendar :: TimeLengthsV1Marker as icu_provider :: DataMarker > :: Yokeable ; 2usize] = [& JA , & UND] ; static KEYS : [& str ; 2usize] = ["ja" , "und"] ; if let Ok (payload) = KEYS . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . map (| i | * unsafe { VALUES . get_unchecked (i) }) { Ok (icu_provider :: DataResponse { payload : Some (icu_provider :: DataPayload :: from_static_ref (payload)) , metadata : Default :: default () , }) } else { Err (icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu::datetime :: provider :: calendar :: TimeLengthsV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } }