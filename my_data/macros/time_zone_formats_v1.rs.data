// @generated
# [doc = " Implement `DataProvider<TimeZoneFormatsV1Marker>` on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_time_zone_formats_v1 { ($ provider : ty) => { # [clippy :: msrv = "1.67"] const _ : () = < $ provider > :: MUST_USE_MAKE_PROVIDER_MACRO ; # [clippy :: msrv = "1.67"] impl icu_provider :: DataProvider < icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > , icu_provider :: DataError > { static UND : < icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1 { hour_format : (alloc :: borrow :: Cow :: Borrowed ("+HH:mm") , alloc :: borrow :: Cow :: Borrowed ("-HH:mm")) , gmt_format : alloc :: borrow :: Cow :: Borrowed ("GMT{0}") , gmt_zero_format : alloc :: borrow :: Cow :: Borrowed ("GMT") , region_format : alloc :: borrow :: Cow :: Borrowed ("{0}") , region_format_variants : unsafe { # [allow (unused_unsafe)] zerovec :: ZeroMap :: from_parts_unchecked (unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"daylightstandard") } , unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x08\0{0} (+1){0} (+0)") }) } , fallback_format : alloc :: borrow :: Cow :: Borrowed ("{1} ({0})") , gmt_offset_fallback : alloc :: borrow :: Cow :: Borrowed ("GMT+?") , } ; static JA : < icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1 { hour_format : (alloc :: borrow :: Cow :: Borrowed ("+HH:mm") , alloc :: borrow :: Cow :: Borrowed ("-HH:mm")) , gmt_format : alloc :: borrow :: Cow :: Borrowed ("GMT{0}") , gmt_zero_format : alloc :: borrow :: Cow :: Borrowed ("GMT") , region_format : alloc :: borrow :: Cow :: Borrowed ("{0}時間") , region_format_variants : unsafe { # [allow (unused_unsafe)] zerovec :: ZeroMap :: from_parts_unchecked (unsafe { zerovec :: ZeroVec :: from_bytes_unchecked (b"daylightstandard") } , unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x0C\0{0}\xE5\xA4\x8F\xE6\x99\x82\xE9\x96\x93{0}\xE6\xA8\x99\xE6\xBA\x96\xE6\x99\x82") }) } , fallback_format : alloc :: borrow :: Cow :: Borrowed ("{1}（{0}）") , gmt_offset_fallback : alloc :: borrow :: Cow :: Borrowed ("GMT+?") , } ; static VALUES : [& < icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker as icu_provider :: DataMarker > :: Yokeable ; 2usize] = [& JA , & UND] ; static KEYS : [& str ; 2usize] = ["ja" , "und"] ; if let Ok (payload) = KEYS . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . map (| i | * unsafe { VALUES . get_unchecked (i) }) { Ok (icu_provider :: DataResponse { payload : Some (icu_provider :: DataPayload :: from_static_ref (payload)) , metadata : Default :: default () , }) } else { Err (icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu::datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } }