// @generated
# [doc = " Implement `DataProvider<DangiMonthSymbolsV1Marker>` on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_datetime_symbols_dangi_months_v1 { ($ provider : ty) => { # [clippy :: msrv = "1.67"] const _ : () = < $ provider > :: MUST_USE_MAKE_PROVIDER_MACRO ; # [clippy :: msrv = "1.67"] impl icu_provider :: DataProvider < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker > , icu_provider :: DataError > { static UND_X_4 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapLinear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x18\0\0\0\0\0\x01\0\x02\0\x03\0\x04\0\x05\0\x06\0\x07\0\x08\0\t\0\x0B\0\r\0\x0F\0\x11\0\x13\0\x15\0\x17\0\x19\0\x1B\0\x1D\0\x1F\0!\0$\0'\x001234567891011121b2b3b4b5b6b7b8b9b10b11b12b") } ,) ; static UND_X_3 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapLinear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x18\0\0\0\0\0\x03\0\x06\0\t\0\x0C\0\x0F\0\x12\0\x15\0\x18\0\x1B\0\x1E\0!\0$\0*\x000\x006\0<\0B\0H\0N\0T\0Z\0`\0f\0M01M02M03M04M05M06M07M08M09M10M11M12M01bisM02bisM03bisM04bisM05bisM06bisM07bisM08bisM09bisM10bisM11bisM12bis") } ,) ; static JA_X_4 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapLinear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x18\0\0\0\0\0\x03\0\x06\0\t\0\x0C\0\x0F\0\x12\0\x15\0\x18\0\x1B\0\x1E\0$\0*\x000\x006\0<\0B\0H\0N\0T\0Z\0`\0f\0o\0\xE6\xAD\xA3\xE4\xBA\x8C\xE4\xB8\x89\xE5\x9B\x9B\xE4\xBA\x94\xE5\x85\xAD\xE4\xB8\x83\xE5\x85\xAB\xE4\xB9\x9D\xE5\x8D\x81\xE5\x8D\x81\xE4\xB8\x80\xE5\x8D\x81\xE4\xBA\x8C\xE9\x96\x8F\xE6\xAD\xA3\xE9\x96\x8F\xE4\xBA\x8C\xE9\x96\x8F\xE4\xB8\x89\xE9\x96\x8F\xE5\x9B\x9B\xE9\x96\x8F\xE4\xBA\x94\xE9\x96\x8F\xE5\x85\xAD\xE9\x96\x8F\xE4\xB8\x83\xE9\x96\x8F\xE5\x85\xAB\xE9\x96\x8F\xE4\xB9\x9D\xE9\x96\x8F\xE5\x8D\x81\xE9\x96\x8F\xE5\x8D\x81\xE4\xB8\x80\xE9\x96\x8F\xE5\x8D\x81\xE4\xBA\x8C") } ,) ; static JA_X_3 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapLinear (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x18\0\0\0\0\0\x06\0\x0C\0\x12\0\x18\0\x1E\0$\0*\x000\x006\0<\0E\0N\0W\0`\0i\0r\0{\0\x84\0\x8D\0\x96\0\x9F\0\xA8\0\xB4\0\xE6\xAD\xA3\xE6\x9C\x88\xE4\xBA\x8C\xE6\x9C\x88\xE4\xB8\x89\xE6\x9C\x88\xE5\x9B\x9B\xE6\x9C\x88\xE4\xBA\x94\xE6\x9C\x88\xE5\x85\xAD\xE6\x9C\x88\xE4\xB8\x83\xE6\x9C\x88\xE5\x85\xAB\xE6\x9C\x88\xE4\xB9\x9D\xE6\x9C\x88\xE5\x8D\x81\xE6\x9C\x88\xE5\x8D\x81\xE4\xB8\x80\xE6\x9C\x88\xE5\x8D\x81\xE4\xBA\x8C\xE6\x9C\x88\xE9\x96\x8F\xE6\xAD\xA3\xE6\x9C\x88\xE9\x96\x8F\xE4\xBA\x8C\xE6\x9C\x88\xE9\x96\x8F\xE4\xB8\x89\xE6\x9C\x88\xE9\x96\x8F\xE5\x9B\x9B\xE6\x9C\x88\xE9\x96\x8F\xE4\xBA\x94\xE6\x9C\x88\xE9\x96\x8F\xE5\x85\xAD\xE6\x9C\x88\xE9\x96\x8F\xE4\xB8\x83\xE6\x9C\x88\xE9\x96\x8F\xE5\x85\xAB\xE6\x9C\x88\xE9\x96\x8F\xE4\xB9\x9D\xE6\x9C\x88\xE9\x96\x8F\xE5\x8D\x81\xE6\x9C\x88\xE9\x96\x8F\xE5\x8D\x81\xE4\xB8\x80\xE6\x9C\x88\xE9\x96\x8F\xE5\x8D\x81\xE4\xBA\x8C\xE6\x9C\x88") } ,) ; static UND_X_1 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapNumeric (icu::datetime :: provider :: neo :: SimpleSubstitutionPattern { pattern : alloc :: borrow :: Cow :: Borrowed ("bis") , subst_index : 0usize , } ,) ; static JA_X_1 : < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable = icu::datetime :: provider :: neo :: MonthSymbolsV1 :: LeapNumeric (icu::datetime :: provider :: neo :: SimpleSubstitutionPattern { pattern : alloc :: borrow :: Cow :: Borrowed ("Èñè") , subst_index : 3usize , } ,) ; static VALUES : [& < icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: DataMarker > :: Yokeable ; 14usize] = [& JA_X_1 , & JA_X_3 , & JA_X_3 , & JA_X_4 , & JA_X_4 , & JA_X_3 , & JA_X_3 , & UND_X_1 , & UND_X_3 , & UND_X_3 , & UND_X_4 , & UND_X_4 , & UND_X_3 , & UND_X_3] ; static KEYS : [& str ; 14usize] = ["ja-x-1" , "ja-x-3" , "ja-x-3s" , "ja-x-4" , "ja-x-4s" , "ja-x-5" , "ja-x-5s" , "und-x-1" , "und-x-3" , "und-x-3s" , "und-x-4" , "und-x-4s" , "und-x-5" , "und-x-5s"] ; if let Ok (payload) = KEYS . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . map (| i | * unsafe { VALUES . get_unchecked (i) }) { Ok (icu_provider :: DataResponse { payload : Some (icu_provider :: DataPayload :: from_static_ref (payload)) , metadata : Default :: default () , }) } else { Err (icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu::datetime :: provider :: neo :: DangiMonthSymbolsV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } }